// Generated by CoffeeScript 1.7.1
(function() {
  var HashMapCollision, HashMapIterator, HashMapNode;

  HashMapNode = require('./hash-map-node');

  HashMapCollision = require('./hash-map-collision');

  module.exports = HashMapIterator = (function() {
    function HashMapIterator(hashMap, mapFn) {
      this.hashMap = hashMap;
      this.mapFn = mapFn;
      this.node = hashMap.root;
      this.index = 0;
      this.nodeStack = [];
      this.indexStack = [];
      this.pair = [];
      this.out = {
        value: this.pair,
        done: false
      };
    }

    HashMapIterator.prototype.next = function() {
      var hashMap, index, indexStack, k, mapFn, node, nodeStack, out, pair, table, v;
      hashMap = this.hashMap, mapFn = this.mapFn, node = this.node, index = this.index, nodeStack = this.nodeStack, indexStack = this.indexStack, pair = this.pair, out = this.out;
      if (node == null) {
        throw new Error("Iteration has already finished");
      }
      while (true) {
        table = node.table;
        if (index < table.length) {
          k = table[index];
          v = table[index + 1];
          if (v instanceof HashMapNode || v instanceof HashMapCollision) {
            nodeStack.push(node);
            indexStack.push(index + 2);
            node = v;
            index = 0;
          } else {
            if (mapFn != null) {
              out.value = mapFn(v, k, hashMap);
            } else {
              pair[0] = k;
              pair[1] = v;
            }
            index += 2;
            break;
          }
        } else {
          if (node = nodeStack.pop()) {
            index = indexStack.pop();
          } else {
            pair[0] = void 0;
            pair[1] = void 0;
            out.value = pair;
            out.done = true;
            break;
          }
        }
      }
      this.node = node;
      this.index = index;
      return out;
    };

    HashMapIterator.prototype.reset = function(hashMap) {
      this.hashMap = hashMap;
      this.node = hashMap.root;
      this.index = 0;
      this.nodeStack.length = 0;
      this.indexStack.length = 0;
      this.pair.length = 0;
      this.out.value.length = 0;
      this.out.done = false;
      return this;
    };

    return HashMapIterator;

  })();

}).call(this);
