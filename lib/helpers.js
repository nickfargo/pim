// Generated by CoffeeScript 1.7.0
(function() {
  var base32, base32p, bin32p, format, formatWithHashes, formatWithHashesInBase32, hashOf, hashOfObject, hashOfString, hex32p, populationOf, print, rxType, typeOf, uid, valueOf, _uid;

  _uid = 0;

  uid = function() {
    return ++_uid | 0;
  };

  hashOf = function(obj) {
    if (!obj) {
      return 0;
    }
    if (obj === true) {
      return 1;
    }
    switch (typeof obj) {
      case 'number':
        return obj | 0;
      case 'string':
        return hashOfString(obj);
      default:
        return hashOfObject(obj);
    }
  };

  hashOfString = function(str) {
    var hash, i;
    hash = 0;
    i = 0;
    while (i < str.length) {
      hash = (hash << 5) - hash + str.charCodeAt(i++) | 0;
    }
    return hash;
  };

  hashOfObject = function(obj) {
    var _ref;
    return (_ref = typeof obj.hash === "function" ? obj.hash() : void 0) != null ? _ref : obj.__hash__ != null ? obj.__hash__ : obj.__hash__ = uid();
  };

  populationOf = function(x) {
    x -= x >> 0x01 & 0x55555555;
    x = (x >> 0x02 & 0x33333333) + (x & 0x33333333);
    x = (x >> 0x04) + x & 0x0F0F0F0F;
    x = (x >> 0x08) + x & 0x00FF00FF;
    return (x >> 0x10) + x & 0x0000FFFF;
  };

  rxType = /^\[object (\w+)\]$/;

  typeOf = function(obj) {
    var _ref;
    return (_ref = Object.prototype.toString.call(obj).match(rxType)) != null ? _ref[1] : void 0;
  };

  valueOf = function(obj) {
    if (obj == null) {
      return obj;
    } else if (typeof obj === 'object' && obj.constructor.name) {
      return "[" + (typeOf(obj)) + " " + obj.constructor.name + "]";
    } else if (typeof obj === 'object' || typeof obj === 'function') {
      return "[" + (typeOf(obj)) + "]";
    } else if (typeof obj === 'string') {
      return "\"" + obj + "\"";
    } else {
      return obj;
    }
  };

  base32 = function(n) {
    return (n >>> 0).toString(32);
  };

  base32p = function(n) {
    return ('0000000' + base32(n)).slice(-7);
  };

  bin32p = function(n) {
    return '00000000000000000000000000000000'.concat((n >>> 0).toString(2)).slice(-32).replace(/([01]{2})([01]{5})([01]{5})([01]{5})([01]{5})([01]{5})([01]{5})/, '$1-$2-$3-$4-$5-$6-$7');
  };

  hex32p = function(n) {
    return ('00000000' + (n >>> 0).toString(16)).slice(-8);
  };

  format = function(obj) {
    var str;
    switch (typeof obj) {
      case 'string':
        return "\"" + obj + "\"";
      case 'object':
      case 'function':
        str = Object.prototype.toString.call(obj);
        return "[" + (str.match(rxType)[1]) + "]";
      default:
        return obj;
    }
  };

  formatWithHashes = function(obj) {
    var str;
    switch (typeof obj) {
      case 'string':
        return "[\"" + obj + "\" #" + (hex32p(hashOf(obj))) + "]";
      case 'object':
      case 'function':
        str = Object.prototype.toString.call(obj);
        return "[" + (str.match(rxType)[1]) + " #" + (hex32p(hashOf(obj))) + "]";
      default:
        return obj;
    }
  };

  formatWithHashesInBase32 = function(obj) {
    var str;
    switch (typeof obj) {
      case 'string':
        return "[\"" + obj + "\" #" + (base32(hashOf(obj))) + "]";
      case 'object':
      case 'function':
        str = Object.prototype.toString.call(obj);
        return "[" + (str.match(rxType)[1]) + " #" + (base32(hashOf(obj))) + "]";
      default:
        return "[" + obj + " #" + (base32(hashOf(obj))) + "]";
    }
  };

  print = function() {
    return console.log.apply(console, arguments);
  };

  module.exports = {
    uid: uid,
    hashOf: hashOf,
    populationOf: populationOf,
    typeOf: typeOf,
    valueOf: valueOf,
    bin32p: bin32p,
    hex32p: hex32p,
    base32: base32,
    base32p: base32p,
    format: format,
    formatWithHashes: formatWithHashes,
    formatWithHashesInBase32: formatWithHashesInBase32,
    print: print
  };

}).call(this);
